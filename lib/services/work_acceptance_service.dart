import 'dart:convert';
import 'dart:io';
import 'package:flutter/cupertino.dart';
import 'package:http/http.dart' as http;
import 'package:flutter_secure_storage/flutter_secure_storage.dart';

class WorkAcceptanceService {
  static final _storage = FlutterSecureStorage();

  // üîß BASE_URL ƒë·ªông theo m√¥i tr∆∞·ªùng
  static const String baseHost = String.fromEnvironment(
    'BASE_URL',
    defaultValue: 'http://localhost:8080',
  );
  static String get baseUrl => '$baseHost/api/works';

  // L·∫•y token t·ª´ storage
  static Future<Map<String, String>> _getHeaders() async {
    final token = await _storage.read(key: 'token');
    final username = await _storage.read(key: 'username');
    final role = await _storage.read(key: 'role');

    return {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer $token',
      'X-Username': username ?? '',
      'X-Role': role ?? '',
    };
  }

  /// 1. Nh·∫≠n vi·ªác
  static Future<bool> acceptWork(
      BuildContext context, int workId, int accountId) async {
    final url = Uri.parse('$baseUrl/$workId/acceptances');
    final headers = await _getHeaders();

    final body = jsonEncode({'workPostedId': workId, 'accountId': accountId});

    final response = await http.post(url, headers: headers, body: body);

    if (response.statusCode == 401 &&
        response.body.contains("T√†i kho·∫£n ƒë√£ b·ªã kh√≥a")) {
      await _storage.deleteAll(); // X√≥a token
      Navigator.of(context)
          .pushNamedAndRemoveUntil('/login', (route) => false);
      return false;
    }

    return response.statusCode == 200;
  }

  /// 2. L·∫•y danh s√°ch ng∆∞·ªùi ƒë√£ nh·∫≠n vi·ªác
  static Future<List<dynamic>> getAcceptancesByWork(int workId) async {
    final url = Uri.parse('$baseUrl/$workId/acceptances');
    final headers = await _getHeaders();

    final response = await http.get(url, headers: headers);

    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else {
      throw Exception('Kh√¥ng th·ªÉ t·∫£i danh s√°ch ng∆∞·ªùi nh·∫≠n vi·ªác');
    }
  }

  /// 3. L·∫•y danh s√°ch ng∆∞·ªùi d√πng ƒë√£ nh·∫≠n/cancel/completed theo tr·∫°ng th√°i
  static Future<List<dynamic>> getAcceptedJobsByStatus(
      int workId, int accountId, String status) async {
    final url =
    Uri.parse('$baseUrl/$workId/acceptances/account/$accountId/status/$status');
    final headers = await _getHeaders();

    final response = await http.get(url, headers: headers);

    print('üîç [DEBUG] G·ªçi API: $url');
    print('üîç [DEBUG] Status code: ${response.statusCode}');
    print('üîç [DEBUG] Response body: ${response.body}');
    print('üì¶ Headers g·ª≠i ƒëi: $headers');

    if (response.statusCode == 200) {
      return jsonDecode(response.body);
    } else {
      throw Exception('Kh√¥ng th·ªÉ l·∫•y c√¥ng vi·ªác ƒë√£ nh·∫≠n theo tr·∫°ng th√°i');
    }
  }

  /// 4. C·∫≠p nh·∫≠t tr·∫°ng th√°i ng∆∞·ªùi nh·∫≠n vi·ªác
  static Future<bool> updateAcceptanceStatus(
      int workId, int acceptanceId, String newStatus) async {
    final url = Uri.parse('$baseUrl/$workId/acceptances/$acceptanceId/status');
    final headers = await _getHeaders();
    final body = jsonEncode({'status': newStatus});

    try {
      final response = await http.put(url, headers: headers, body: body);

      print('üì¶ Request: PUT $url');
      print('üì§ Body: $body');
      print('üì• Status: ${response.statusCode}');
      print('üì• Response: ${response.body}');

      if (response.statusCode == 200) {
        return true;
      } else {
        final decoded = jsonDecode(response.body);
        final error = decoded['error']?.toString().toUpperCase() ?? '';

        print('‚ùó L·ªói backend: $error');

        if (error.contains("COMPLETED")) {
          throw Exception("C√¥ng vi·ªác ƒë√£ k·∫øt th√∫c, kh√¥ng th·ªÉ thay ƒë·ªïi.");
        } else if (error.contains("CANCELLED")) {
          throw Exception(
              "B·∫°n ƒë√£ h·ªßy c√¥ng vi·ªác, kh√¥ng th·ªÉ nh·∫≠n l·∫°i ƒë·ªÉ tr√°nh spam.");
        } else if (error.contains("B·∫†N KH√îNG C√ì QUY·ªÄN")) {
          throw Exception(
              "B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t tr·∫°ng th√°i c√¥ng vi·ªác n√†y.");
        } else {
          throw Exception("Ch·ªâ ch·ªß s·ªü h·ªØu m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t.");
        }
      }
    } on FormatException catch (e) {
      print('‚ùå FormatException (JSON?): $e');
      throw Exception("Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ m√°y ch·ªß.");
    } on SocketException catch (e) {
      print('‚ùå SocketException: $e');
      throw Exception("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra m·∫°ng.");
    } catch (e) {
      print('‚ùå Exception khi g·ªçi API: $e');
      throw Exception(e.toString());
    }
  }
}
